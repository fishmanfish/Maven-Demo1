<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context4.1.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

    <!-- 配置整合mybatis过程 -->
    <!-- 1.配置数据库相关参数properties的属性：${url} -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:/properties/db.properties" />
    </bean>
    <!-- 2.数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <!-- 配置连接池属性 -->
        <property name="driverClassName" value="${driverClassName}" />
        <property name="url" value="${url}" />
        <property name="username" value="${username}" />
        <property name="password" value="${password}" />
    </bean>

    <!-- 3.配置SqlSessionFactory对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
        <property name="configLocation" value="classpath:/mapper/mybatis.xml" />
        <!-- 扫描entity包 使用别名 -->
        <property name="typeAliasesPackage" value="e3.mall.beans" />
        <!-- 扫描sql配置文件:mapper需要的xml文件 -->
        <property name="mapperLocations" value="classpath:/mapper/config/**Mapper.xml" />
    </bean>

    <!-- 4.单个mapper接口扫描 -->
    <!--<bean class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="e3.mall.mapper.EmpMapper"></property>
        <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
    </bean>-->
    <!--多个mapper接口扫描-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <!-- 给出需要扫描Mapper接口 -->
        <property name="basePackage" value="e3.mall.mapper" />
    </bean>

    <!--Spring AOP配置文件方式-->
    <!--<bean id="aop" class="fishman.fish.aop.CommonAOP"></bean>
    <bean class="fishman.fish.controller.EmpController"></bean>

    <aop:config>
        <aop:aspect ref="aop">
            <aop:pointcut id="ctrl" expression="execution(* fishman.fish.controller.*.*(..))"/>
            <aop:before method="before" pointcut-ref="ctrl"></aop:before>
        </aop:aspect>
    </aop:config>-->

    <!--开启AOP注解-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!--配置Spring事务管理机制-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>  <!--配置数据源-->
    </bean>

    <!--使用@Transactional注解-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--声明式事务管理(tx + aop方式)-->
    <!--<tx:advice id="empUpdAdv" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="upd*" propagation="REQUIRED"/>  &lt;!&ndash;对以upd开头的方法进行事务管理，以及对事务的传播方式进行配置&ndash;&gt;
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="empUpd" expression="execution(* fishman.fish.controller.EmpController.*(..))"/>
        <aop:advisor advice-ref="empUpdAdv" pointcut-ref="empUpd"/>
    </aop:config>-->

    <!--编程式事务管理-->
    <!--<bean class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager"></property>
        <property name="isolationLevelName" value="ISOLATION_READ_COMMITTED"></property> &lt;!&ndash;配置事务隔离级别&ndash;&gt;
        <property name="propagationBehaviorName" value="PROPAGATION_REQUIRED"></property>&lt;!&ndash;配置事务传播方式&ndash;&gt;
    </bean>-->
</beans>